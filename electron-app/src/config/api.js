const { env } = require('./env.json');

const APIConfig = {
    server: {
        getBaseURL: () => env[global.MODE].serverURL,
        okm: {
            updateStatus: 'api/custom-uri/okm/updateStatus',
            getFileDetails: 'api/custom-uri/getFileDetails',
            getToolDetail: 'api/custom-uri/getToolDetail',
            getActivityDetails: 'api/custom-uri/getActivityDetails',
            updateFileTRNLog: 'api/custom-uri/updateFileTRNLog',
            updateNewFileName: 'api/custom-uri/updateNewFileName',
            getIssueWorkorderInfo: 'api/custom-uri/getIssueWorkorderInfo',
            getRevisedFileInfoE2E: 'api/custom-uri/getRevisedFileInfoE2E',
            acsContentWrite: 'api/custom-uri/acscontentwrite',
            getFormattedGraphicPath: 'api/custom-uri/getFormattedGraphicPath',
            getS3UploadDetails: 'api/custom-uri/getS3UploadDetails',
            uploadS3Payload:'api/custom-uri/uploadS3Payload',
            insertTrnFiles:'api/custom-uri/insertTrnFiles',
            getEventFileDeatils: 'api/externalTask/getEventFileDeatils/',
            getlateststgacty: 'api/custom-uri/getlateststgacty',

        },
        tools: {
            createAPIRequestId: 'api/utils/tools/createAPIRequestId',
            updateAPIRequestId: 'api/utils/tools/updateAPIRequestId',
            addfileSequence: 'api/task/addFileSequence',
            skipOnceSuccessTool: 'api/task/skipSuccessTool',
            completeAPIRequestId: 'api/utils/tools/completeAPIRequestId',
            updateBackupFile: 'api/utils/updateBackupFile',
            getBackupFileDetails: 'api/utils/getBackupFileDetails',
            getToolsStatusForServiceTask: 'api/utils/tools/getToolsStatusForServiceTask/',
            updateBulkBackupFile: 'api/utils/updateBulkBackupFile',
            checkMandatoryToolSuccess: 'api/utils/tools/checkToolLatestStatus', // <-- Added AI by Co-Pilot
        },
        utils: {
            getActivityDetails: 'api/task/getActivityDetails',
            getEventDetails: 'api/task/getEventDetails',
            copyLinkingDocxFilesForAllChapters: 'api/task/copyLinkingDocxFilesForAllChapters',
            jobInfoDetailsUpdate: 'api/task/jobInfoDetailsUpdate',
            getFileSeqByPriority: 'api/task/getFileSeqByPriority',
            getGraphicStageActivityDetails: 'api/task/getGraphicStageActivityDetails',
            isValidFile: 'api/utils/isValidFile/',
            getToolsFileDetail: 'api/utils/getToolsFileDetail/',
            getFileValidationStatus: 'api/utils/getFileValidationStatus/',
            getDocumentProps: 'api/utils/okm/getDocumentProps',
            checkout: 'api/utils/okm/checkout',
            getPlaceHolders: 'api/task/getPlaceHolders',
            updateFileSyncStatus: 'api/task/updateFileSyncStatus',
            lockFileSyncStatus: 'api/task/lockFileSyncStatus',
            getUuid: 'api/utils/okm/getUuid',
            deleteFile: 'api/utils/okm/deleteFile',
            isFileExist: 'api/utils/okm/isFileExist',
            getJobInfoDetails: 'api/task/getJobInfoDetails',
            TemplateDetailsUpdate: 'api/task/TemplateDetailsUpdate',
            TemplateDetailsDelete: 'api/task/TemplateDetailsDelete',
            getToolsDetails: 'api/task/getToolsDetails',
            invokeTools: 'api/task/invokeTools',
            onsaveGetToolsDetails: 'api/task/onsaveGetToolsDetails',
            getIncomingFileType: 'api/utils/getIncomingFileType',
            deleteTranscationEnterisForCancel: 'api/utils/deleteTranscationEnterisForCancel',
            Impersonator: 'auth/get/adminuser',
            getLastFileName: 'api/woi/getLastFileName',//Addedby Anand(is7576) get last file name,
            retreiveFiles: 'api/utils/okm/retreiveFiles',
            graphicsTrnUpdate: 'api/task/graphicsTrnUpdate',
            trnactivtyEntry: 'api/task/trnactivtyEntry',
            BookDetailsTextForActivites: 'api/woi/BookDetailsTextForActivites',
            getGraphicIterationDetail: 'api/task/getGraphicIterationDetail',
            getRestoreVersion: 'api/utils/okm/getRestoreVersion',
            getPreviousActivitiesForCancel: 'api/utils/getPreviousActivitiesForCancel',
            copyEntFileForAllChapter: 'api/task/copyEntFileForAllChapter',
            fetchguId: 'api/task/fetchguId',
            copyPageTarget: 'api/task/copyPageTarget',
            checkGraphicEnabled: 'api/task/checkGraphicEnabled',
            updateTotalPgFromPgInfo: 'api/fileDetails/updatePgNumFromPginfo',
            internalShippingFile: 'api/task/internalShippingFile',
            getIoppJournalDetails: 'api/task/getIoppJournalDetails',
            captureUserEvent: "api/task/captureUserEvent",
            uploadxltoFTP: 'api/task/uploadxltoFTP',
            isWordCount: 'api/task/isWordCount',
            onSaveMailTrigger: 'api/task/onSaveMailTrigger',
            pkgUploadOpenKmToSftp: 'api/master/pkgUploadOpenKmToSftp',
            copyPageTargetForServiceTask: 'api/task/copyPageTargetForServiceTask',
            checkFirstTimeCreatedActivity: 'api/utils/checkWipActivity',
            checkPendingStatus: 'api/utils/checkPendingStatus',//added by vaithi
            getACSnotes: 'api/task/notestoacs',
            getdataACSnotes: 'api/utils/getdataACSnotes',
            getdataConvertFile: 'api/utils/getdataConvertFile',
            getEllocationID: 'api/utils/getEllocationID',
            getdataACSDNP: 'api/utils/getdataACSDNP',
            getdataConvertFile: 'api/utils/getdataConvertFile',
            getVtwJsonServiceCall: 'api/utils/getVtwJsonServiceCall/',
            getFileSequenceForSprBook:'api/task/getFileSequence',
            getFileSequence:'api/custom-uri/getFileSequence',
            getFileSequenceTemplate:'api/custom-uri/getFileSequenceTemplate',
            getCustomerConfig: 'api/task/getCustomerConfig',
            savePageDetails: 'api/fileDetails/savePageDetails',
            readXmlExport:'api/woi/readXmlExport',

        }
    },
    azure: {
        getBaseURL: () => env[global.MODE].azureURL,
        url: {
            "checkin": "document/checkin",
            "getProperties": "document/getProperties",
            "delete": "document/delete",
            "checkout": "document/checkout",
            "copy": "document/extendedCopy",
            "download": "document/download",
            "isExists": "document/isExists",
            "blobRoleback": "document/BlobRoleback",
            "retreiveBlobFilesURL": "document/retreiveBlobFilesURL",
            "DeleteBlobSnapshort": "document/DeleteBlobSnapshort",
            // "localcheckin": 'document/localcheckin',
            // "getlocalProperties": 'document/getlocalProperties',
            // "localdelete": 'document/localfiledelete',
            // "localcheckout": 'document/localcheckout',
            // "localcopy": 'document/localextendedCopy',
            // "localdownload":'document/localdownload',
            // "localisExists": "document/localisExists",
            // "localRoleback" :  "document/localRoleback",
            // "retreivelocalFilesURL": "document/retreivelocalFilesURL",
            // "DeletelocalSnapshort" : "document/DeletelocalSnapshort",
            "checkinWithSASKey": "document/checkinWithSASKey",
            
        }
    },
    local: {
        getBaseURL: () => env[global.MODE].localURL,
        url: {
            "localcheckin": 'document/localcheckin',
            "getlocalProperties": 'document/getlocalProperties',
            "localdelete": 'document/localfiledelete',
            "localcheckout": 'document/localcheckout',
            "localcopy": 'document/localextendedCopy',
            "localdownload": 'document/localdownload',
            "localisExists": "document/localisExists",
            "localRoleback": "document/localRoleback",
            "retreivelocalFilesURL":"document/retreivelocalFilesURL",
            "DeletelocalSnapshort":"document/DeletelocalSnapshort",
            "Downloadmandatorycheck" :"document/downloadmandatorycheck",
            "ZIPDownloadBlobFolder": 'document/ZIPDownloadBlobFolder',
            "localcheckinJson": 'document/localcheckinJson',
            "createZipInLocalServer":'document/createZipInLocalServer',
            "validateUploadedFile":'document/validateUploadedFile'
        }
    },
    okm: {
        getBaseURL: () => env[global.MODE].okmURL,
        getOKmNativeBaseURL: () => env[global.MODE].OKM_NATIVEURL,

        document: {
            download: 'downloaddocument',
            getContent: 'document/getContent',
            upload: '/upload',
            checkin: 'checkin',
            unlock: 'document/unlock',
            isLocked: 'document/isLocked',
            checkout: 'document/checkout',
            getUuid: 'repository/getNodeUuid/',
            documentCopy: 'document/extendedCopy/',
            getDocumentProps: 'document/getProperties/',
            checkin: 'document/checkin/',
            createFile: 'document/createSimple/',
            delete: 'document/delete',
            folderCreate: "folder/createMissingFolders"
        }
    },
    uri: {
        getFolderPath: 'api/utils/getFolderPath/',
        createFolder: 'api/utils/okm/createFolder/',
        isFileExist: 'api/utils/okm/isFileExist',
        getFileMovementConfig: 'api/bpmn/listener/getFileMovementConfig/',
        getTemplateSrcDetails: 'api/utils/getTemplateSrcDetails/',
        copyFile: 'api/utils/okm/copyFile/',
        getFileNameForPii: 'api/bpmn/listener/getFileNameForPii/',
    }
}

module.exports = {
    APIConfig
};